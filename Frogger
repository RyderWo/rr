]import objectdraw.*;

public class Frogger extends WindowController {
    private static final double HIGHWAY_LENGTH = 700;
    private static final double LANE_WIDTH = 100;
    private static final int NUM_LANES = 4;
    private static final double HIGHWAY_WIDTH = LANE_WIDTH * NUM_LANES;
    private static final double LINE_WIDTH = LANE_WIDTH / 10;

    private Frog frog;
    private Lane lane1;
    private Lane lane2;
    private Lane lane3;
    private Lane lane4;

    public void begin() {
        new FilledRect(0, LANE_WIDTH, HIGHWAY_LENGTH, HIGHWAY_WIDTH, canvas);
        drawLaneDividers();
        initializeGameElements();
    }

    private void drawLaneDividers() {
        int whichLine = 1;
        while (whichLine < NUM_LANES) {
            if (whichLine == NUM_LANES / 2) {
                drawNoPassingLine(HIGHWAY_TOP + (whichLine * LANE_WIDTH));
            } else {
                drawPassingLine(HIGHWAY_TOP + (whichLine * LANE_WIDTH) - (LINE_WIDTH / 2));
            }
            whichLine++;
        }
    }

    private void initializeGameElements() {
        Image frogImage = getImage("froggy.gif");
        frog = new Frog(frogImage, new Location(HIGHWAY_LENGTH / 2 - FROG_WIDTH / 2, HIGHWAY_BOTTOM + HIGHWAY_WIDTH / 6 - FROG_WIDTH / 2), LANE_WIDTH, canvas);

        Image[] vehicleImages = {
                getImage("jeep_right.gif"),
                getImage("oldcar_left.gif"),
                getImage("taxi_left.gif"),
                getImage("van_right.gif")
        };

        double[] velocities = {0.033 + (Math.random() * 0.1), -(0.033 + (Math.random() * 0.1)),
                -(0.033 + (Math.random() * 0.1)), 0.033 + (Math.random() * 0.1)};

        double[] startOffsets = {0, 42, 66, 60};

        Lane[] lanes = {lane1, lane2, lane3, lane4};

        for (int i = 0; i < NUM_LANES; i++) {
            lanes[i] = new Lane(velocities[i], vehicleImages[i], new Location(0, HIGHWAY_TOP + (LANE_WIDTH - startOffsets[i]) / 2 + LANE_WIDTH * i), HIGHWAY_LENGTH, frog, canvas);
        }
    }

    private void drawNoPassingLine(double y) {
        new FilledRect(0, y, HIGHWAY_LENGTH, LINE_WIDTH, canvas).setColor(Color.yellow);
    }

    private void drawPassingLine(double y) {
        double x = 0;
        while (x < HIGHWAY_LENGTH) {
            new FilledRect(x, y, LANE_WIDTH / 3, LINE_WIDTH, canvas).setColor(Color.white);
            x += LANE_WIDTH / 3 + LANE_WIDTH / 6;
        }
    }

    public void onMousePress(Location point) {
        if (frog.isAlive()) {
            frog.hopToward(point);
        } else if (point.getY() > 400) {
            frog.reincarnate();
        }
    }

    public static void main(String[] args) {
        new Frogger().startController(500, 500);
    }
}
